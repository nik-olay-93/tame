datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in BigInt?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  administratedProjects Project[] @relation("ProjectAdmin")
  projects              Project[] @relation("ProjectUser")
  teams                 Team[]
  assigned_tasks        Task[]    @relation("TaskAssignee")
  issued_tasks          Task[]    @relation("TaskIssuer")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  administrators User[]   @relation("ProjectAdmin")
  members        User[]   @relation("ProjectUser")
  teams          Team[]
  tags           Tag[]
  tasks          Task[]   @relation("TaskProject")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  members     User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  name        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id], name: "TaskProject")
  projectId   String
  issuer      User     @relation(fields: [issuerId], references: [id], name: "TaskIssuer")
  issuerId    String
  assignee    User?    @relation(fields: [assigneeId], references: [id], name: "TaskAssignee")
  assigneeId  String?
  tags        Tag[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Tag {
  id          String   @id @default(cuid())
  name        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
